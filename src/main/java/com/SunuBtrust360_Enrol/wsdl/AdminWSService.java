package com.SunuBtrust360_Enrol.wsdl;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;

/**
 * This class was generated by Apache CXF 4.0.3
 * 2023-12-01T16:54:21.278Z
 * Generated source version: 4.0.3
 *
 */
@WebServiceClient(name = "AdminWSService",
                  wsdlLocation = "https://10.10.0.16/signserver/AdminWSService/AdminWS?wsdl",
                  targetNamespace = "http://adminws.signserver.org/")
public class AdminWSService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://adminws.signserver.org/", "AdminWSService");
    public final static QName AdminWSPort = new QName("http://adminws.signserver.org/", "AdminWSPort");
    static {
        URL url = null;
        try {
            url = new URL("https://10.10.0.16/signserver/AdminWSService/AdminWS?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(AdminWSService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "https://10.10.0.16/signserver/AdminWSService/AdminWS?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public AdminWSService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public AdminWSService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public AdminWSService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public AdminWSService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public AdminWSService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public AdminWSService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns AdminWS
     */
    @WebEndpoint(name = "AdminWSPort")
    public AdminWS getAdminWSPort() {
        return super.getPort(AdminWSPort, AdminWS.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AdminWS
     */
    @WebEndpoint(name = "AdminWSPort")
    public AdminWS getAdminWSPort(WebServiceFeature... features) {
        return super.getPort(AdminWSPort, AdminWS.class, features);
    }

}
